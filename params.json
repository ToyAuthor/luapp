{
  "name": "Luapp",
  "tagline": "A lua wrapper for C++. Header file only.",
  "body": "# luapp\r\nIt's a useful tool for lua. To help you use lua in C++ style and work better with object-oriented programming.\r\n\r\n### Features\r\n- [x] Header file only.\r\n- [x] To register C++ class into lua.\r\n- [x] C++ and lua could call each other's function.\r\n- [x] Read/Write/Add/Remove lua global variable at C++ side.\r\n- [x] Lua could send any variable to C++, and C++ could send then back.\r\n- [x] Support to create C extension module.\r\n- [x] Design a C++ container to simulate lua table.\r\n- [x] Design a class whose instances can hold instances of any type supported by luapp.\r\n- [x] Let lua script embedded in C++.\r\n- [x] Be able to search lua script by custom rule.\r\n- [ ] Support to call lua function that has multiple return value.\r\n\r\n### Requirements\r\n- CMake 2.8+\r\n- Lua 5.3+\r\n- C++03+\r\n\r\n### Information\r\nItem        | Description\r\n------------|----------\r\n**Author**  | Yan Xin Wu\r\n**License** | MIT\r\n**Version** | 1.3.0.x (using Semantic Versioning 2.0.0)\r\n\r\n### Example\r\n\r\n```lua\r\n-- ClassIntoLua.lua\r\n\r\nobject = NewObject()\r\n\r\nnum = object:count(3,4)\r\n\r\nprint(\"3 + 4 = \" .. num)\r\n```\r\n\r\n```c++\r\n// main.cpp\r\n\r\n#include \"luapp.hpp\"\r\n\r\nclass MyClass\r\n{\r\npublic:\r\n\r\n\tMyClass()\r\n\t{\r\n\t\tprintf(\"do MyClass::MyClass()\\n\");\r\n\t}\r\n\r\n\t~MyClass()\r\n\t{\r\n\t\tprintf(\"do MyClass::~MyClass()\\n\");\r\n\t}\r\n\r\n\tlua::Int count( lua::Int num01,\r\n\t                lua::Int num02)\r\n\t{\r\n\t\treturn num01 + num02;\r\n\t}\r\n};\r\n\r\nint main()\r\n{\r\n\tlua::State<>    lua;\r\n\r\n\tlua.bindMethod(\"count\",&MyClass::count);\r\n\r\n\tlua.bindClassEx<MyClass>(\"NewObject\");\r\n\r\n\tlua.run(\"ClassIntoLua.lua\");\r\n\r\n\treturn 0;\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}