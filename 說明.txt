
 luapp
=======

簡介:
    luapp 是建立在 lua 之上的工具
    將 lua 原本那些容易誤用的 C 語言介面給包裝起來
    luapp 只有用標頭檔實作所以不需要另外編譯建立 library


版本號進號規則:
    進號規則遵守 Semantic Versioning 2.0.0
    A.B.C
    A: 當使用介面功能有新增修改或刪除才會進號，所以只要這個數字沒變就保證了相容性
    B: 當A不需進號，但是有新增介面時，此欄位就會進號
    C: 介面沒有變動，功能沒有改變，只有修正bug或者提升效能


luapp 主要的功能有這些:
    .協助把 C++ 的類別植入 lua 當中，之後便可在 lua 裡建立 C++ 物件了
    .C++ 的成員函式可以綁上物件指標傳給 lua 當成全域函式呼叫，lua 的全域函式也可以由 C++ 呼叫
    .幾種 luapp 指定的通用資料型態可以在 lua 跟 C++ 之間交流傳遞
    .table 結構可以在 C++ 跟 lua 之間交流傳遞，但是不支援的元素型態會被忽略
    .協助建立 lua 模組(在模組狀態下可支援的 luapp 介面會少很多，因為沒有使用全域變數)
    .實作 lua::Var 這樣的通用容器，可裝多種資料型態


該注意的陷阱:
    .lua 無法得知 C++ 物件的真實記憶體大小
        在 lua 這邊建立的 C++ 物件是由 table 加上 user data 模擬的
        雖然在 user data 被清除的時候會去釋放 C++ 物件
        但是對 lua 而言這 user data 只佔了一個指標的記憶體空間
        所以 lua 的垃圾回收機制無法查覺到廢棄 C++ 物件已經佔用太多空間
        你可以等 lua 自己的周期性清理工作來處理
        或者自己定期執行 collectgarbage("collect") 來解決這個隱憂

    .傳入 lua 的空指標不會轉成 nil，因為我認為兩者還是需要做區分
    .lua::Table 可以用等號運算子複製整個結構，不像 lua table 只複製了參考
    .目前導入 lua 的類別只能使用無參數的建構子，以後可能會實作多參數的版本


以下為 luapp 跟 lua 通用的資料型態:
    lua::Int     整數
    lua::Num     浮點數，lua 預設是使用倍精數
    lua::Str     字串，用 std::string 實作
    lua::Bool    只有 true 跟 false 兩種值的型態
    lua::Table   用法大致跟 lua table 一樣，但是等號運算子會真的複製整個容器
    lua::Nil     這跟 lua 的 nil 是一樣的角色定位
    lua::Ptr     一個不定型的指標，傳進 lua 會以 light user data 的身份來儲存


以下三個為 luapp 不支援的 lua 資料型態:
    thread       這個是 lua 內建功能
    function     有待評估
    user data    個人覺得 lua::Ptr 使用上更加直覺、簡單，所以不去支援這項
